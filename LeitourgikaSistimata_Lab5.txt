ΑΣΚΗΣΗ 1
  ΛΥΣΗ (Έχει μια παραπάνω δυνατότητα απο αυτή που ζητάει η άσκηση, εμφανίζει τον αύξων αριθμό κάθε Οντότητας τους Συστήματος Αρχείων):
    #!/bin/bash
    #dirstat.sh
    id=1
    for i in *
    do
    #	echo -n "${id}. "
    	if [ -d $i ]; then
    		echo "${i} : is directory."
    	elif [ -f $i ]; then
    		echo "${i} : is file."
    	else
    		echo "${i}: is something else."
    	fi
    	((id++))
    done

ΑΣΚΗΣΗ 2.1
  ΛΥΣΗ:
    #!/bin/bash
    #create_test.sh
    if [ "${#}" -ne 1 ]; then
    	echo "ERROR: Wrong number of parameters have been given." 1>&2
    	exit 1
    fi
    for ((i=1; i<51; i++))
    do
    	touch ${1}.${i}
    done

ΑΣΚΗΣΗ 2.2
  ΛΥΣΗ: Δημιουργία 100 αρχείων
    #!/bin/bash
    for ((i=1; i<101; i++))
    do
    	touch "${i}file"
    done
  ΛΥΣΗ: Διαγραφή των 100 αρχείων
    #!/bin/bash
    for ((i=1; i<101; i++))
    do
    	rm "${i}file"
    done

ΑΣΚΗΣΗ 3
  ΛΥΣΗ:
    #!/bin/bash
    echo -n "Give directory 1 name: "
    read dir1
    echo -n "Give directory 2 name: "
    read dir2
    #echo "Directory 1: ${dir1}" # ΓΙΑ ΕΛΕΓΧΟ. ΔΕΝ ΧΡΕΙΑΖΕΤΑΙ.
    #echo "Directory 2: ${dir2}" # ΓΙΑ ΕΛΕΓΧΟ. ΔΕΝ ΧΡΕΙΑΖΕΤΑΙ.
    # Check if given directories exist
    if [ ! -e $dir1 ] ; then
    	echo "Dir ${dir1} does not exist and will be created."
    	mkdir "${dir1}"
    fi
    if [ ! -e $dir2 ]; then
    	echo "Dir ${dir2} does not exist and will be created."
    	mkdir "${dir2}"
    fi
    mv [0-5]* "${dir1}/"
    mv [6-9]* "${dir2}/"
    echo -n "Total files moved in ${dir1}: "
    lines_dir1=`ls -l "${dir1}" | wc -l` # ΓΙΑ ΤΗΝ ΑΦΑΙΡΕΣΗ ΤΗΣ ΓΡΑΜΜΗΣ total x
    echo $((lines_dir1-1)) # ΓΙΑ ΤΗΝ ΑΦΑΙΡΕΣΗ ΤΗΣ ΓΡΑΜΜΗΣ total x
    echo -n "Total files moved in ${dir2}: "
    lines_dir2=`ls -l "${dir2}" | wc -l` # ΓΙΑ ΤΗΝ ΑΦΑΙΡΕΣΗ ΤΗΣ ΓΡΑΜΜΗΣ total x
    echo $((lines_dir2-1)) # ΓΙΑ ΤΗΝ ΑΦΑΙΡΕΣΗ ΤΗΣ ΓΡΑΜΜΗΣ total x

ΑΣΚΗΣΗ 4
  ΛΥΣΗ 1: Αρχική έκδση.
    #!/bin/bash
    if (($# != 1)); then
    	echo "ERROR: Wrong number of parameters have been given." 1>&2
    	exit 1
    else
    	if [ -e $1 ]; then
    		echo "${1} FOUND IN CURRENT DIRECTORY"
    		found=0
    	else
    	#		echo "ERROR: File not found in current directory." 1>&2
    		tmp_exitcode=1
    	fi	
    	for i in *;
    	do
    		if [ -d $i ]; then
    			if [ -e ./$i/$1 ]; then
    				echo "${1} FOUND IN DIRECTORY ./${i}"
    				found=0
    			fi
    		fi
    	done
    fi

  ΛΥΣΗ 2: Βελτιωμένη έκδοση. Επιστρέφει και errorcodes αν και δεν τα ζηταέι η άσκηση.
    #!/bin/bash
    tmp_exitcode=0
    found=1
    if (($# != 1)); then
    	echo "ERROR: Wrong number of parameters have been given." 1>&2
    	exit 1
    else
    	if [[ -e $1 ]]; then
    		echo "${1} FOUND IN CURRENT DIRECTORY"
    		found=0
    	else
    	#		echo "ERROR: File not found in current directory." 1>&2
    		tmp_exitcode=1
    	fi	
    	for i in *;
    	do
    		if [[ -d $i ]]; then
    			if [[ -e ./$i/$1 ]]; then
    				echo "${1} FOUND IN DIRECTORY ./${i}"
    				found=0
    			fi
    		fi
    	done
    fi
    if (($found == 0)); then
    	tmp_exitcode=0
    else
    	echo "ERROR: No file found." 1>&2
    	tmp_exitcode=2
    fi
    exit ${tmp_exitcode}

ΑΣΚΗΣΗ 5
  ΛΥΣΗ: 
	#!/bin/bash
	#lab5 - askisi5
	tmp_exitcode=0
	found=0
	linesfound=0
	if [ "${#}" -ne 2 ]; then
		echo "ERROR: Wrong number of parameters have been given." 1>&2
		exit 1
	else
		if [ -d $1 ]; then
			ls -l "${1}"/*."${2}" 2>/dev/null | egrep --color '(^-[r].{2}[r])|(^-[r].{5}[r])|^-.{3}[r].{2}[r]'
			if [ "${?}" -eq 0 ]; then
				found=0
			else
				found=2
			fi
		else
			echo "ERROR: First paramater is not directory." 1>&2
			exit 2
		fi	
	fi
	if [ "${found}" -eq 0 ]; then
		tmp_exitcode=0
		echo -n "Total lines found: "
		ls -l "${1}"/*."${2}" 2>/dev/null | egrep --color '(^-[r].{2}[r])|(^-[r].{5}[r])|^-.{3}[r].{2}[r]' | wc -l
	else
		echo "ERROR: No files found." 1>&2
		tmp_exitcode=2
	fi
	exit "${tmp_exitcode}"

ΑΣΚΗΣΗ 6
  ΛΥΣΗ:
	#!/bin/bash
	#lab5 - askisi6
	# Basic checks - START
	if [ "${#}" -ne 1 ]; then # Check number of paramaters
		echo "ERROR: Wrong number of parameters have been given." 1>&2
		exit 1
	fi
	if [ ! -d "${1}" ]; then # Check if given parameter is a directory
		echo "ERROR: Parameter is not a directory." 1>&2
		exit 2
	fi
	# Basic checks - END
	dir="${1}"
	for f in "$dir/"*; do
		if [ -f "${f}" ]; then
			file "${f}"
		fi
	done

ΑΣΚΗΣΗ 7
  ΛΥΣΗ:
	#!/bin/bash
	#lab5 - askisi7 - comp_room.sh
	# Basic checks - START
	required_params=2 # Number of required parameters
	if [ "${#}" -ne "${required_params}" ]; then # Check number of parameters
		echo "ERROR: Wrong number of parameters have been given." 1>&2
		exit 1
	fi
	if [ ! -f "${1}" ]; then # Check if 1st parameter is a file
		echo "ERROR: File \"${1}\" does not exist." 1>&2
		exit 2
	fi
	if [ ! -r "${1}" ]; then # Check if 1st parameter is a readable file
		echo "ERROR: File \"${1}\" is not a readable file." 1>&2
		exit 2
	fi
	# Basic checks - END
	file_param="${1}"
	room_param="${2}"
	if [ -e "ip${room_param}.txt" ]; then # Check if ip$room_param file exists and keeps backup
		mv "ip${room_param}.txt" "ip${room_param}.bak"
	fi
	egrep ":${room_param}" "${file_param}" | egrep --color '(:.{2}[[:digit:]]){1}' | sort -t ":" -k2n > "ip${room_param}.txt"
	echo "File \"ip${room_param}.txt\" with `wc -l < "ip${room_param}.txt"` lines created successfully."
	# NOTES/TESTS - START
	# USE THIS? cut -d":" -f2 data.txt | cut -c4-5 | sort -k1n
	# THIS? sort -k2n -t ":" data.txt
	# OR THIS? egrep ":${room_param}" "${file_param} | egrep --color '(:.{2}[[:digit:]]){1}' | sort -t ":" -k2n
	# NOTES/TESTS - END

ΑΣΚΗΣΗ 8
  ΛΥΣΗ:
	#!/bin/bash
	#lab5 - Askisi 8 - checkusers.sh
	file2read="/etc/passwd"
	IFS=':'
	while read line; do
		set ${line}
		echo "Username: ${1} - Home folder: ${6}"
	done < "${file2read}" | sort
	# ΠΑΡΑΤΗΡΗΣΗ 1: 
	#	Αν την παράμετρο στη γραμμή set ${line} την βάλουμε σε εισαγωγικά (δηλ. set "${line}") δεν θα παίξει σωστά ο διαχωρισμός.
	# ΠΑΡΑΤΗΡΗΣΗ 2: 
	#	Αν μια γραμμή περιέχει ανάμεσα στον διαχωριστή (:) μόνο το * (π.χ. :*:)
	#	τότε χαλάει η καταχώρηση στις μεταβλητές {1}, {2} κτλ με την set.
	#	Αν το * περιέχεται ανάμεσα στο κείμενο του πεδίου που θέλουμε να αντιστοιχίσουμε 
	#	σε μια μεταβλητή (π.χ. :zn*si:) δεν υπάρχει πρόβλημα.

ΑΣΚΗΣΗ 9
  ΛΥΣΗ:
	#!/bin/bash
	#lab5 - Askisi 9 - checkusers2.sh
	getent passwd | cut -d ':' -f1,6 | sort
	# OR
	#cat /etc/passwd | cut -d ':' -f1,6 | sort

ΑΣΚΗΣΗ 10
  ΛΥΣΗ (Θέλει βελτίωση ωστε να ελέγχει αν έχει δοθεί παράμετρος):
	#!/bin/bash
	#lab5 - askisi10 - display_capital.sh
	# Basic checks - START
	required_params=1 # Number of required parameters
	if [ "${#}" -ne "${required_params}" ]; then # Check number of parameters
		echo "ERROR: Wrong number of parameters have been given." 1>&2
		exit 1
	fi	
	if [ ! -f "${1}" ]; then # Check if 1st parameter is a file
		echo "ERROR: File \"${1}\" does not exist." 1>&2
		exit 2
	fi
	if [ ! -r "${1}" ]; then # Check if 1st parameter is a readable file
		echo "ERROR: File \"${1}\" is not a readable file." 1>&2
		exit 2
	fi
	# Basic checks - END
	cat "${1}" | tr [:lower:] [:upper:]

ΑΣΚΗΣΗ 11
  ΛΥΣΗ:
	#!/bin/bash
	#lab5 - askisi11 - ls_capital.sh
	# Basic checks - START
	required_params=1 # Number of required parameters
	if [ "${#}" -ne "${required_params}" ]; then # Check number of parameters
		echo "ERROR: Wrong number of parameters have been given." 1>&2
		exit 1
	fi	
	if [ ! -d "${1}" ]; then # Check if 1st parameter is a directory
		echo "ERROR: Directory \"${1}\" does not exist." 1>&2
		exit 2
	fi
	# Basic checks - END
	ls -l "${1}" | tr -s ' ' | cut -d " " -f9 | egrep '^[^" "]' | tr [:lower:] [:upper:]

ΑΣΚΗΣΗ 12
  ΛΥΣΗ:
	#!/bin/bash
	#Lab5 - Askisi 12
	last | egrep '^[^ ]' | head -n -1 | cut -f 1 -d" " | sort | uniq -c | sort -nr

ΑΣΚΗΣΗ 13.A
  ΛΥΣΗ:
	#!/bin/bash
	#lab5 - askisi13 - urlparse.sh
	# Basic checks - START
	required_params=1 # Number of required parameters
	if [ "${#}" -ne "${required_params}" ]; then # Check number of parameters
		echo "ERROR: Wrong number of parameters have been given." 1>&2
		exit 1
	fi
	if [ ! -f "${1}" ]; then # Check if 1st parameter is a file
		echo "ERROR: File \"${1}\" does not exist." 1>&2
		exit 2
	fi
	if [ ! -r "${1}" ]; then # Check if 1st parameter is a readable file
		echo "ERROR: File \"${1}\" is not a readable file." 1>&2
		exit 2
	fi
	# Basic checks - END
	cat "${1}" | cut -d "/" -f3

ΑΣΚΗΣΗ 13.B
  ΛΥΣΗ:
	#!/bin/bash
	#lab5 - askisi13 - urlparse2.sh
	# Basic checks - START
	required_params=1 # Number of required parameters
	if [ "${#}" -ne "${required_params}" ]; then # Check number of parameters
		echo "ERROR: Wrong number of parameters have been given." 1>&2
		exit 1
	fi
	if [ ! -f "${1}" ]; then # Check if 1st parameter is a file
		echo "ERROR: File \"${1}\" does not exist." 1>&2
		exit 2
	fi
	if [ ! -r "${1}" ]; then # Check if 1st parameter is a readable file
		echo "ERROR: File \"${1}\" is not a readable file." 1>&2
		exit 2
	fi
	# Basic checks - END
	cat "${1}" | cut -d "/" -f3 | uniq -c

ΑΣΚΗΣΗ 14
  ΛΥΣΗ:
	#!/bin/bash
	#lab5 - askisi14 - iphost.sh
	# Basic checks - START
	required_params=1 # Number of required parameters
	if [ "${#}" -ne "${required_params}" ]; then # Check number of parameters
		echo "ERROR: Wrong number of parameters have been given." 1>&2
		exit 1
	fi
	# Basic checks - END
	host "${1}" >"/tmp/${$}"
	if [ "${?}" -ne 0 ]; then
		echo "-"
	else
		cat "/tmp/${$}" | cut -d " " -f5 | cut -d "," -f1-4
	fi
	rm /tmp/"${$}"

ΑΣΚΗΣΗ 15
ΑΣΚΗΣΗ 16
